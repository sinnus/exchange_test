<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:mx="library://ns.adobe.com/flex/mx" layout="vertical" width="100%" height="100%">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<mx:ViewStack id="viewStack" width="100%" height="100%">
		<mx:VBox verticalAlign="middle" horizontalAlign="center">
			<mx:HBox>
				<mx:Label text="Username: "/>
				<mx:TextInput id="usernameTextArea" />
			</mx:HBox>
			<mx:Button label="Login" click="onLogin()"/>
		</mx:VBox>
		<mx:VBox>
			<mx:Button label="Add Request" click="onAddRequest()"/>
			<mx:Button label="Get Top10Request" click="getRequests()"/>
			<mx:HBox>
				<mx:VBox>
					<mx:Label text="Top 10 buy requests"/>
					<mx:DataGrid dataProvider="{_top10BuyRequests}">
						<mx:columns>
							<mx:DataGridColumn headerText="Price" dataField="price"/>
							<mx:DataGridColumn headerText="Count" dataField="count"/>
						</mx:columns>
					</mx:DataGrid>
					
					<mx:Label text="Top 10 sell requests"/>
					<mx:DataGrid dataProvider="{_top10SellRequests}">
						<mx:columns>
							<mx:DataGridColumn headerText="Price" dataField="price"/>
							<mx:DataGridColumn headerText="Count" dataField="count"/>
						</mx:columns>
					</mx:DataGrid>					
				</mx:VBox>
				<mx:VBox>
					<mx:Label text="Completed transactions"/>
					<mx:DataGrid dataProvider="{_transactions}">
						<mx:columns>
							<mx:DataGridColumn headerText="Tool name" dataField="tool_name"/>
							<mx:DataGridColumn headerText="Price" dataField="price"/>
						</mx:columns>
					</mx:DataGrid>						
				</mx:VBox>
			</mx:HBox>
		</mx:VBox>
	</mx:ViewStack>
	
	<fx:Script>
		<![CDATA[
			import com.adobe.serialization.json.JSON;
			import com.adobe.serialization.json.JSONDecoder;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.managers.PopUpManager;
			import flash.events.SecurityErrorEvent;	
			import flash.net.*;

			private var socket:XMLSocket;
			
			[Bindable]
			private var _top10BuyRequests:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var _top10SellRequests:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var _transactions:ArrayCollection = new ArrayCollection();
			private var _username:String;

			
			private function onLogin():void
			{
				_username = usernameTextArea.text;
				if (_username == "") {
					Alert.show("Введите имя пользователя");
					return;
				}
				socket=new XMLSocket();				
				socket.addEventListener(DataEvent.DATA, handleData);
				socket.addEventListener(SecurityErrorEvent.SECURITY_ERROR, handleSecurityError);
				socket.addEventListener(Event.CONNECT, handleConnect);
				socket.connect("localhost", 9234);
			}

			private function handleConnect(event:Event):void
			{
				var loginObject:Object = new Object();
				loginObject.login = _username;
				loginObject.password = "password";
				socket.send(JSON.encode(loginObject));
				viewStack.selectedIndex = 1;
			}

			private function handleSecurityError(event:Event):void
			{
				Alert.show("SecurityError: " + event.toString());
			}
			
			private function onAddRequest():void {
				var requestForm:RequestForm = new RequestForm();
				requestForm.addEventListener(RequestFormEvent.REQUEST_BUY, handleRequestBuy);
				requestForm.addEventListener(RequestFormEvent.REQUEST_SELL, handleRequestSell);
				PopUpManager.addPopUp(requestForm, this, true);
				PopUpManager.centerPopUp(requestForm);

			}
			
			private function handleRequestBuy(event:RequestFormEvent):void
			{
				socket.send('{"type": "RequestBuy", "data": {"price": ' + event.price + ', "tool": "tool1"}}');		
			}
	
			private function handleRequestSell(event:RequestFormEvent):void
			{
				socket.send('{"type": "RequestSell", "data": {"price": ' + event.price + ', "tool": "tool1"}}');	
			}
			
			private function getRequests():void {
				socket.send('{"type": "GetRequests", "data": null}');
				socket.send('{"type": "GetTransactions", "data": null}');
			}
			
			private function handleData(event:DataEvent):void
			{
				var eventObject:Object = JSON.decode(event.data);
				if (eventObject.type == "Top10BuySellRequests")
				{
					var elem:Object;
					_top10BuyRequests.removeAll();
					for each(elem in eventObject.data.buy_requests)
					{
						_top10BuyRequests.addItem(elem);
					}

					_top10SellRequests.removeAll();
					for each(elem in eventObject.data.sell_requests)
					{
						_top10SellRequests.addItem(elem);
					}
				} else if (eventObject.type == "Logon")
				{
					getRequests();				
				} else if (eventObject.type == "BuyRequestDone")
				{
					Alert.show("BuyRequestDone. Price: " + eventObject.data);
					getRequests();
				} else if (eventObject.type == "SellRequestDone")
				{
					Alert.show("SellRequestDone. Price: " + eventObject.data);
					getRequests();
				} else if (eventObject.type == "RequestAdded")
				{
					getRequests();
				} else if (eventObject.type == "Transactions")
				{
					var elem1:Object;
					_transactions.removeAll();
					for each(elem1 in eventObject.data)
					{
						_transactions.addItem(elem1);
					}
				}
			}
		]]>
	</fx:Script>
</mx:Application>
